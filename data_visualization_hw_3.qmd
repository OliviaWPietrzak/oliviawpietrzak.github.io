---
title: "Homework 3"
author: "Olivia Wilson-Pietrzak"
editor: visual
---

## Question 1

#### Scatterplot

Use to explore relationships between 2 variables (e.g., correlation, distributions, etc).

```{r}
# Scatterplot

x <- c(0.5, 2, 4, 8, 12, 16) #x is the travel times
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8) #y1 is the responses per seecond
y2 <- c(4, .8, .5, .45, .4, .3) #y2 is the responses per travel

#https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/
par(
      las = 1, #las - label styles (0 = always parallel, 1 = always horizontal, 2 = always perpendicular, 3 = always vertical )
      mar = c(5,5,2,5), #controls the margins on each side of the display box. 1 = , 2 = , 3 = , 4 =
      mgp = c(5, 1, 0), #controls labels in the margins. 1st value = axis title distance, 2nd value = tick mark distance, 3rd value = axis
      cex = .5 #controls the size of the points 
    ) 
plot.new()
plot.window(
              range(x) #controls the possible values on the x-axis. this sets it equal to the x values
              , c(0,6) #controls the possible values on the y-axis. 
            )  
par(
  #col="blue", #controls plot color (points and lines) -- this command didn't work when I tried to graph                 the lines and points below. I had to call out the color for each element.
  fg="grey25", #this changes the colors of the the axes and labels
  col.axis="black" #this changes the color of the tick labels
   )
lines(x, y1, col = "lightblue")
lines(x, y2, col = "pink")
points(x, y1, pch=16, cex=2, col = "blue") #pch changes the display mark, and cex changes the size of the display mark.
points(x, y2, pch=21, col = "red", bg="white", cex=2) #bg changes the background color in the filled icons.

#https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/Axis
axis(
      1, #this is the axis you are working with 1 = bottom, 2 = left, 3 = top, 4 = right
      at=seq( #tells where to put the tick marks
              0, #starting point
              16, #ending point
              4 #intervals
             ),
      cex.axis = 1.5,
      family ="serif"
    )
axis(2, at=seq(0, 6, 2), cex.axis = 1.5, family = "serif")
axis(4, at=seq(0, 6, 2),cex.axis = 1.5, family = "serif")

box(bty="u") #draws a box around the graph 
              # bty="o" - Open box (all 4 sides) - this is the default
              # bty="l" - L shape (left and bottom only)
              # bty="7" - Looks like a 7 (top and right only)
              # bty="c" - C shape (top, left, bottom - no right)
              # bty="u" - U shape (left, bottom, right - no top)
              # bty="]" - Right bracket (top, right, bottom - no left)
              # bty="n" - None (no box at all)

#https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/mtext
mtext(
      "Travel Time(s)", #text
      side= 1, #what side you're labeling. 1 = bottom, 2 = left, 3 = top, 4 = right
      line=3, #where to place it in the margin
      las = 1, #rotation of the label. See above.
      cex= 1, #size of text
      family= "serif"
      )
mtext("Responses per Travel", side=2, line=3, las=0, cex=1, family = "serif")
mtext("Responses per Second", side=4, line=3, las=0, cex=1, family = "serif")
rect(3, 2.25, 5, 2.75, col = "lightgrey", border = "grey")
text(4, 2.5, "Bird 131", cex=2, family = "serif")

```

![](images/clipboard-1840260292.png)

#### Histogram

Bar Plot

Box Plot

Perspective Plot

Pie Chart

## Question 3

### Use different font (e.g., serif)

When using base R, you can call different families of typeface. So if you wanted to do serif, you'd say family = "serif". Other packages use different processes â€“ [this article explains well.](https://www.geeksforgeeks.org/r-language/fonts-in-r/#)

### Non-default colors

You can use a hex-code to select any color you'd like. When you specify col, use double quotes and then paste the hex code in the quotes (keep the hashtag).

```{r}
col = "#afe984"
col = "#624f6d"
```

### Use different plotting characters

## Question 4

### Use different font (ggplot2)

geomtext has the command family that lets you switch the font.

### Non-default colors (ggplot2)

You can use a hexcode for this as well (see Q3 above).

### Non-default symbols (ggplot2)

scale_shape_manual()...? Need to do more research/testing.

## Question 5

```{r}
#############################
# Step 0: Download the data.#
#############################
# 
# ## Download COVID data from OWID GitHub
 owidall = read.csv("https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true")
# #Deselect cases/rows with OWID
 owidall = owidall[!grepl("^OWID", owidall$iso_code), ]
# # Subset by continent: Europe
 owideu = subset(owidall, continent=="Europe")

#############################################################
# Step 1: Transform the date data and get the subset needed.#
#############################################################

#Change the data type to date.
owideu$date = as.Date(owideu$date)
owideu_country_test = subset(owideu, location %in% c("Germany", "Italy", "Ukraine", "Spain")) #this is not right, but using all of the coutnries yields a graph that doesn;t have the right shape at all...since these are specifically mentioned, I only kept them.
owideu_date_subset = subset(owideu_country_test, date >= as.Date("2020-01-01") & date <= as.Date("2023-08-31"))

#Relabel the variables to use for easier coding
x = (owideu_date_subset$date)
y = (owideu_date_subset$new_deaths)

###################################
# Step 2: Start the visualization.#
###################################
#Run this if you need to reset the visualizations(start over completely).
#?dev.off
#dev.off()

#Create the plot and the axes.
plot.new()

plot.window(
              range( as.Date("2019-11-01"),as.Date("2023-09-01")), # controls the possible values on the x-axis
              c(0, 6500) # there's a bit above the 6000 value.
           )  

par(
      fg = "black", #black axes and tickmarks
      col.axis = "black" #black tickmark labels
    )

#Putting the points on the graph
points(x, y, pch = 20, cex = 0.8, col = "#e72b8a")

#These are the months displayed on the graph provided by Dr. Ho.
months_for_labels = as.Date(c(
                                "2020-01-01", "2020-02-01", "2020-04-01", "2020-06-01", "2020-08-01", "2020-10-01", "2020-11-01",
                                "2021-01-01", "2021-03-01", "2021-05-01", "2021-07-01", "2021-08-01", "2021-10-01", "2021-12-01",
                                "2022-04-01", "2022-06-01", "2022-07-01", "2022-09-01", "2022-11-01",
                                "2023-01-01", "2023-03-01", "2023-04-01", "2023-06-01", "2023-08-01"
                              )
                            )

#Now that the tickmark labels have been made and transformed to date, I'll add them to the x-axis.
axis(
  1,
  at = as.numeric(months_for_labels), #leave this as numeric
  labels = format(months_for_labels, "%Y-%m"), #this will format the label as YYYY-MM
  cex.axis = .8,
  family = "serif",
  las = 2,
  tick = FALSE
)

#y axis with tick marks
axis(
  2, 
  at = seq(0, 6000, 1000)
  , cex.axis = 1
  , family = "serif",
  tick = TRUE
  )

#box around the entire graph
box(bty = "o")

#labelled points
 text(as.numeric(as.Date("2020-06-01")), 6000, "Spain", cex = .8, family = "serif")
 text(as.numeric(as.Date("2020-06-01")), 4750, "Spain", cex = .8, family = "serif")
 text(as.numeric(as.Date("2021-03-01")), 6400, "Germany", cex = .8, family = "serif")
 text(as.numeric(as.Date("2022-01-01")), 4750, "Ukraine", cex = .8, family = "serif") 
 text(as.numeric(as.Date("2023-04-01")), 1250, "Germany", cex = .8, family = "serif")
 text(as.numeric(as.Date("2023-09-01")), 250, "Italy", cex = .8, family = "serif")
```
